{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "AssignInstanceRole": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "InstanceRoleName" }, "" ] }
      ]
    },
    "AssignPublicIp": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoPublicIp" }, "true" ] }
      ]
    },
    "AssignStaticPrivateIp": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "PrivateIp" }, "" ] }
      ]
    },
    "CreateAppVolume": {
      "Fn::Equals": [ { "Ref": "AppVolumeDevice" }, "true" ]
    },
    "HaveAkas": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "AkaList" }, "" ] }
      ]
    },
    "InstallCloudWatchAgent": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "CloudWatchAgentUrl" }, "" ] }
      ]
    },
    "InstallUpdates": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoUpdates" }, "true" ] }
      ]
    },
    "Reboot": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoReboot" }, "true" ] }
      ]
    },
    "SupportsNvme": {
      "Fn::Equals": [
        {
          "Fn::FindInMap": [
            "InstanceTypeMap",
            { "Ref": "InstanceType" },
            "SupportsNvme"
          ]
        },
        "true"
      ]
    },
    "UseAdminGroups": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerAdminGroups" }, "" ] }
      ]
    },
    "UseAdminPubkeyURL": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "AdminPubkeyURL" }, "" ] }
      ]
    },
    "UseAdminUsers": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerAdminUsers" }, "" ] }
      ]
    },
    "UseCfnUrl": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "CfnEndpointUrl" }, "" ] }
      ]
    },
    "UseComputerName": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerComputerName" }, "" ] }
      ]
    },
    "UseElbHealthCheck": {
      "Condition": "UseTargetGroupArns"
    },
    "UseEnvironment": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerEnvironment" }, "" ] }
      ]
    },
    "UseKeyPair": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "KeyPairName" }, "" ] }
      ]
    },
    "UseOuPath": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerOuPath" }, "" ] }
      ]
    },
    "UseScheduledAction": {
      "Fn::And": [
        {
          "Fn::Not": [
            { "Fn::Equals": [ { "Ref": "ScaleUpSchedule" }, "" ] }
          ]
        },
        {
          "Fn::Not": [
            { "Fn::Equals": [ { "Ref": "ScaleDownSchedule" }, "" ] }
          ]
        }
      ]
    },
    "UseTargetGroupArns": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Fn::Join": [ "", { "Ref": "TargetGroupArns" } ] }, "" ] }
      ]
    },
    "UseToolBucket": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "ArtifactoryToolBucket" }, "" ] }
      ]
    },
    "UseWamConfig": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerConfig" }, "" ] }
      ]
    }
  },
  "Description": "This template creates an Autoscaling Group and Launch Configuration that deploys STIG-hardened EL7 instances to host Artifactory Enterprise Edition cluster-nodes.",
  "Mappings": {
    "InstanceTypeMap": {
      "c4.large": {
        "SupportsNvme": "false"
      },
      "c4.xlarge": {
        "SupportsNvme": "false"
      },
      "c4.2xlarge": {
        "SupportsNvme": "false"
      },
      "c4.4xlarge": {
        "SupportsNvme": "false"
      },
      "c5.large": {
        "SupportsNvme": "true"
      },
      "c5.xlarge": {
        "SupportsNvme": "true"
      },
      "c5.2xlarge": {
        "SupportsNvme": "true"
      },
      "c5.4xlarge": {
        "SupportsNvme": "true"
      },
      "m4.large": {
        "SupportsNvme": "false"
      },
      "m4.xlarge": {
        "SupportsNvme": "false"
      },
      "m4.2xlarge": {
        "SupportsNvme": "false"
      },
      "m4.4xlarge": {
        "SupportsNvme": "false"
      },
      "m5.large": {
        "SupportsNvme": "true"
      },
      "m5.xlarge": {
        "SupportsNvme": "true"
      },
      "m5.2xlarge": {
        "SupportsNvme": "true"
      },
      "m5.4xlarge": {
        "SupportsNvme": "true"
      },
      "t2.large": {
        "SupportsNvme": "false"
      },
      "t2.medium": {
        "SupportsNvme": "false"
      },
      "t2.xlarge": {
        "SupportsNvme": "false"
      },
      "t2.2xlarge": {
        "SupportsNvme": "false"
      }
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "EC2 Instance Configuration"
          },
          "Parameters": [
            "AmiId",
            "InstanceType",
            "RootVolumeSize",
            "WatchmakerComputerName",
            "ProvisionUser",
            "KeyPairName",
            "AdminPubkeyURL",
            "InstanceRoleName",
            "InstanceRoleProfile",
            "SubnetIds",
            "PrivateIp",
            "NoPublicIp",
            "SecurityGroupIds",
            "NoReboot",
            "NoUpdates",
            "DesiredCapacity",
            "MinCapacity",
            "MaxCapacity",
            "ScaleDownSchedule",
            "ScaleUpSchedule",
            "TargetGroupArns"
          ]
        },
        {
          "Label": {
            "default": "EC2 Application EBS Volume"
          },
          "Parameters": [
            "AppVolumeDevice",
            "AppVolumeMountPath",
            "AppVolumeSize",
            "AppVolumeType"
          ]
        },
        {
          "Label": {
            "default": "Application Configuration"
          },
          "Parameters": [
            "ArtifactoryRepoUrl",
            "ArtifactoryRpmName",
            "ArtifactoryAppHome",
            "ArtifactoryClusterHome",
            "ArtifactoryClusterKey",
            "ArtifactoryClusterMaster",
            "AkaList",
            "ArtifactoryToolBucket",
            "ArtifactoryS3ShardLocs",
            "ArtifactoryS3BakupLocs"
          ]
        },
        {
          "Label": {
            "default": "Database Configuration"
          },
          "Parameters": [
            "ArtifactoryDbHost",
            "ArtifactoryDbInstance",
            "ArtifactoryDbAdminUser",
            "ArtifactoryDbAdminPasswd"
          ]
        },
        {
          "Label": {
            "default": "EC2 Watchmaker Configuration"
          },
          "Parameters": [
            "PypiIndexUrl",
            "WatchmakerConfig",
            "WatchmakerEnvironment",
            "WatchmakerOuPath",
            "WatchmakerAdminGroups",
            "WatchmakerAdminUsers"
          ]
        },
        {
          "Label": {
            "default": "CloudFormation Configuration"
          },
          "Parameters": [
            "CfnEndpointUrl",
            "CfnGetPipUrl",
            "CfnBootstrapUtilsUrl",
            "CloudWatchAgentUrl",
            "ToggleCfnInitUpdate",
            "ToggleNewInstances"
          ]
        }
      ],
      "ParameterLabels": {
        "ToggleCfnInitUpdate": {
          "default": "Force Cfn Init Update"
        },
        "ToggleNewInstances": {
          "default": "Force New Instances"
        }
      }
    },
    "Version": "1.5.2"
  },
  "Outputs": {
    "ArtifactoryASGId": {
      "Description": "Autoscaling Group ID",
      "Value": { "Ref": "ArtifactoryASG" }
    },
    "ArtifactoryLCId": {
      "Description": "Launch Configuration ID",
      "Value": { "Ref": "ArtifactoryLC" }
    },
    "ArtifactoryLCLogGroupName": {
      "Condition": "InstallCloudWatchAgent",
      "Description": "Log Group Name",
      "Value": { "Ref": "ArtifactoryLCLogGroup" }
    },
    "ScaleDownScheduledAction": {
      "Condition": "UseScheduledAction",
      "Description": "Scale Down Scheduled Action ID",
      "Value": { "Ref": "ScaleDownScheduledAction" }
    },
    "ScaleUpScheduledAction": {
      "Condition": "UseScheduledAction",
      "Description": "Scale Up Scheduled Action ID",
      "Value": { "Ref": "ScaleUpScheduledAction" }
    }
  },
  "Parameters": {
    "AdminPubkeyURL": {
      "AllowedPattern": "^http[s]?://.*|^$",
      "Description": "(Optional) URL of file containing admin group's SSH public-keys",
      "Type": "String"
    },
    "AkaList": {
      "Description": "Comma-delimited list of FQDNs that should be accepted as valid names to service requests on behalf of.",
      "Type": "String"
    },
    "AmiId": {
      "Description": "ID of the AMI to launch",
      "Type": "AWS::EC2::Image::Id"
    },
    "AppVolumeDevice": {
      "AllowedValues": [
        "true",
        "false"
      ],
      "Default": "false",
      "Description": "Decision whether to mount an extra EBS volume. Leave as default (\"false\") to launch without an extra application volume",
      "Type": "String"
    },
    "AppVolumeMountPath": {
      "AllowedPattern": "/.*",
      "Default": "/opt/data",
      "Description": "Filesystem path to mount the extra app volume. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String"
    },
    "AppVolumeSize": {
      "ConstraintDescription": "Must be between 1GB and 16384GB.",
      "Default": "1",
      "Description": "Size in GB of the EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "MaxValue": "16384",
      "MinValue": "1",
      "Type": "Number"
    },
    "AppVolumeType": {
      "AllowedValues": [
        "gp2",
        "io1",
        "sc1",
        "st1",
        "standard"
      ],
      "Default": "gp2",
      "Description": "Type of EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String"
    },
    "ArtifactoryAppHome": {
      "AllowedPattern": "^/.*$|^$",
      "Default": "",
      "Description": "Root-location of Artifactory's non-shared components",
      "Type": "String"
    },
    "ArtifactoryClusterHome": {
      "AllowedPattern": "^[a-z][a-z0-9-.]*$|^$",
      "Default": "",
      "Description": "FQDN of NFS server hosting Artifactory's cluster-shared components",
      "Type": "String"
    },
    "ArtifactoryClusterKey": {
      "AllowedPattern": "^[a-z0-9]{32}$|^$",
      "Default": "",
      "Description": "A hexadecimal string used to secure intra-cluster communications (ignored if \"ClusterHome\" is null; use `openssl rand -hex 16` to generate)",
      "Type": "String"
    },
    "ArtifactoryClusterMaster": {
      "AllowedValues": [
        "true",
        "false"
      ],
      "Default": "false",
      "Description": "Whether this node is a cluster's master node (ignored if \"ClusterHome\" is null)",
      "Type": "String"
    },
    "ArtifactoryDbAdminPasswd": {
      "Default": "",
      "Description": "Password for the Artifactory configuration database's privileged user account",
      "NoEcho": "true",
      "Type": "String"
    },
    "ArtifactoryDbAdminUser": {
      "Default": "",
      "Description": "Name of the Artifactory configuration database's privileged user account",
      "Type": "String"
    },
    "ArtifactoryDbHost": {
      "Default": "",
      "Description": "Fully-qualified domain name of the (externalized) Artifactory configuration database-host/cluster",
      "Type": "String"
    },
    "ArtifactoryDbInstance": {
      "Default": "",
      "Description": "Instance-name of the Artifactory configuration database",
      "Type": "String"
    },
    "ArtifactoryRepoUrl": {
      "AllowedPattern": "^http[s]?://.*|^$",
      "Default": "https://jfrog.bintray.com/artifactory-pro-rpms",
      "Description": "URL/location of the repository definition-file that configures Artifactory RPM download capability.",
      "Type": "String"
    },
    "ArtifactoryRpmName": {
      "AllowedPattern": "^jfrog-artifactory-pro.*$|^$",
      "Default": "jfrog-artifactory-pro",
      "Description": "Name of the Artifactory installation-RPM. Include release version if 'other-than-latest' is desired. Example values would be: jfrog-artifactory-pro, jfrog-artifactory-pro-X.Y.Z",
      "Type": "String"
    },
    "ArtifactoryS3BakupLocs": {
      "Default": "",
      "Description": "Name of the S3 bucket used as destination for automated backups.",
      "Type": "String"
    },
    "ArtifactoryS3ShardLocs": {
      "Default": "",
      "Description": "Name of the S3 bucket(s) used as destination for sharded artifact storage (use a colon-delimited list if more than one bucket will be used)",
      "Type": "String"
    },
    "ArtifactoryToolBucket": {
      "Default": "",
      "Description": "Name of the S3 bucket containing installers, licenses, etc.",
      "Type": "String"
    },
    "CfnBootstrapUtilsUrl": {
      "AllowedPattern": "^http[s]?://.*\\.tar\\.gz$",
      "Default": "https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz",
      "Description": "URL to aws-cfn-bootstrap-latest.tar.gz",
      "Type": "String"
    },
    "CfnEndpointUrl": {
      "AllowedPattern": "^$|^http[s]?://.*$",
      "Default": "https://cloudformation.us-east-1.amazonaws.com",
      "Description": "(Optional) URL to the CloudFormation Endpoint. e.g. https://cloudformation.us-east-1.amazonaws.com",
      "Type": "String"
    },
    "CfnGetPipUrl": {
      "AllowedPattern": "^http[s]?://.*\\.py$",
      "Default": "https://bootstrap.pypa.io/2.6/get-pip.py",
      "Description": "URL to get-pip.py",
      "Type": "String"
    },
    "CloudWatchAgentUrl": {
      "AllowedPattern": "^$|^s3://.*$",
      "Default": "",
      "Description": "(Optional) S3 URL to CloudWatch Agent installer. Example: s3://amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip",
      "Type": "String"
    },
    "DesiredCapacity": {
      "Default": "1",
      "Description": "Desired number of instances in the Autoscaling Group",
      "Type": "Number"
    },
    "InstanceRoleName": {
      "Default": "",
      "Description": "(Optional) IAM instance role-name to use for signalling",
      "Type": "String"
    },
    "InstanceRoleProfile": {
      "Default": "",
      "Description": "(Optional) IAM instance profile-name to apply to the instance",
      "Type": "String"
    },
    "InstanceType": {
      "AllowedValues": [
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "c5.large",
        "c5.xlarge",
        "c5.2xlarge",
        "c5.4xlarge",
        "m5.large",
        "m5.xlarge",
        "m5.2xlarge",
        "m5.4xlarge"
      ],
      "Default": "t2.large",
      "Description": "Amazon EC2 instance type",
      "Type": "String"
    },
    "KeyPairName": {
      "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
      "Type": "String"
    },
    "MaxCapacity": {
      "Default": "2",
      "Description": "Maximum number of instances in the Autoscaling Group",
      "Type": "Number"
    },
    "MinCapacity": {
      "Default": "1",
      "Description": "Minimum number of instances in the Autoscaling Group",
      "Type": "Number"
    },
    "NoPublicIp": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "true",
      "Description": "Controls whether to assign the instance a public IP. Recommended to leave at \"true\" _unless_ launching in a public subnet",
      "Type": "String"
    },
    "NoReboot": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to reboot the instance as the last step of cfn-init execution",
      "Type": "String"
    },
    "NoUpdates": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to run yum update during a stack update (on the initial instance launch, Watchmaker _always_ installs updates)",
      "Type": "String"
    },
    "PrivateIp": {
      "Default": "",
      "Description": "(Optional) Set a static, primary private IP. Leave blank to auto-select a free IP",
      "Type": "String"
    },
    "ProvisionUser": {
      "AllowedPattern": "[a-z0-9-]{6,12}",
      "ConstraintDescription": "Alphanumeric string between 6 and 12 characters.",
      "Default": "ec2-user",
      "Description": "Name for remote-administration account",
      "Type": "String"
    },
    "PypiIndexUrl": {
      "AllowedPattern": "^http[s]?://.*$",
      "Default": "https://pypi.org/simple",
      "Description": "URL to the PyPi Index",
      "Type": "String"
    },
    "RootVolumeSize": {
      "ConstraintDescription": "Must be between 20GB and 16384GB.",
      "Default": "20",
      "Description": "Size in GB of the EBS volume to create. If smaller than AMI defaul, create operation will fail; If larger, root device-volume's partition size will be increased",
      "MaxValue": "16384",
      "MinValue": "20",
      "Type": "Number"
    },
    "ScaleDownSchedule": {
      "Default": "",
      "Description": "(Optional) Scheduled Action in cron-format (UTC) to scale down to MinCapacity; ignored if empty or ScaleUpSchedule is unset (E.g. \"0 0 * * *\")",
      "Type": "String"
    },
    "ScaleUpSchedule": {
      "Default": "",
      "Description": "(Optional) Scheduled Action in cron-format (UTC) to scale up to MaxCapacity; ignored if empty or ScaleDownSchedule is unset (E.g. \"0 10 * * Mon-Fri\")",
      "Type": "String"
    },
    "SecurityGroupIds": {
      "Description": "List of security groups to apply to the instance(s)",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "SubnetIds": {
      "Description": "List of subnets to associate to the Autoscaling Group",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "TargetGroupArns": {
      "Default": "",
      "Description": "Comma-separated string of Target Group ARNs to associate with the Autoscaling Group",
      "Type": "CommaDelimitedList"
    },
    "ToggleCfnInitUpdate": {
      "AllowedValues": [
        "A",
        "B"
      ],
      "Default": "A",
      "Description": "A/B toggle that forces a change to instance metadata, triggering the cfn-init update sequence",
      "Type": "String"
    },
    "ToggleNewInstances": {
      "AllowedValues": [
        "A",
        "B"
      ],
      "Default": "A",
      "Description": "A/B toggle that forces a change to instance userdata, triggering new instances via the Autoscale update policy",
      "Type": "String"
    },
    "WatchmakerAdminGroups": {
      "Default": "",
      "Description": "(Optional) Colon-separated list of domain groups that should have admin permissions on the EC2 instance",
      "Type": "String"
    },
    "WatchmakerAdminUsers": {
      "Default": "",
      "Description": "(Optional) Colon-separated list of domain users that should have admin permissions on the EC2 instance",
      "Type": "String"
    },
    "WatchmakerComputerName": {
      "Default": "",
      "Description": "(Optional) Sets the hostname/computername within the OS",
      "Type": "String"
    },
    "WatchmakerConfig": {
      "AllowedPattern": "^$|^(http[s]?|s3|file)://.*$",
      "Default": "",
      "Description": "(Optional) Path to a Watchmaker config file.  The config file path can be a remote source (i.e. http[s]://, s3://) or local directory (i.e. file://)",
      "Type": "String"
    },
    "WatchmakerEnvironment": {
      "AllowedValues": [
        "",
        "dev",
        "test",
        "prod"
      ],
      "Default": "",
      "Description": "Environment in which the instance is being deployed",
      "Type": "String"
    },
    "WatchmakerOuPath": {
      "AllowedPattern": "^$|^(OU=.+,)+(DC=.+)+$",
      "Default": "",
      "Description": "(Optional) DN of the OU to place the instance when joining a domain. If blank and \"WatchmakerEnvironment\" enforces a domain join, the instance will be placed in a default container. Leave blank if not joining a domain, or if \"WatchmakerEnvironment\" is \"false\"",
      "Type": "String"
    }
  },
  "Resources": {
    "ArtifactoryASG": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": { "Ref": "DesiredCapacity" },
          "Timeout": "PT30M"
        }
      },
      "Properties": {
        "DesiredCapacity": { "Ref": "DesiredCapacity" },
        "HealthCheckGracePeriod": {
          "Fn::If": [
            "UseElbHealthCheck",
            3600,
            { "Ref": "AWS::NoValue" }
          ]
        },
        "HealthCheckType": {
          "Fn::If": [
            "UseElbHealthCheck",
            "ELB",
            "EC2"
          ]
        },
        "LaunchConfigurationName": { "Ref": "ArtifactoryLC" },
        "MaxSize": { "Ref": "MaxCapacity" },
        "MinSize": { "Ref": "MinCapacity" },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": {
              "Fn::Join": [
                "",
                [
                  { "Ref": "AWS::StackName" }
                ]
              ]
            }
          }
        ],
        "TargetGroupARNs": {
          "Fn::If": [
            "UseTargetGroupArns",
            { "Ref": "TargetGroupArns" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "VPCZoneIdentifier": { "Ref": "SubnetIds" }
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingReplacingUpdate": {
          "WillReplace": "true"
        }
      }
    },
    "ArtifactoryLC": {
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "admkey-install": {
            "commands": {
              "1-install-keyfile": {
                "command": "bash -xe /etc/cfn/scripts/admkey.sh"
              }
            },
            "files": {
              "/etc/cfn/files/AdminKeys.pub": {
                "source": { "Ref": "AdminPubkeyURL" },
                "group": "root",
                "mode": "000600",
                "owner": "root"
              },
              "/etc/cfn/scripts/admkey.sh": {
              "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "PROVHOME=$(getent passwd ",
                      { "Ref": "ProvisionUser" },
                      " | awk -F\":\" '{print $6}')\n",
                      "\n",
                      "install -b -m 000600 -o ",
                      { "Ref": "ProvisionUser" },
                      " -g ",
                      { "Ref": "ProvisionUser" },
                      " /etc/cfn/files/AdminKeys.pub ${PROVHOME}/.ssh/authorized_keys\n",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            }
          },
          "configSets": {
            "launch": [
              "setup",
              {
                "Fn::If": [
                  "InstallCloudWatchAgent",
                  "cw-agent-install",
                  { "Ref": "AWS::NoValue" }
                ]
              },
              "watchmaker-install",
              "watchmaker-launch",
              {
                "Fn::If": [
                  "UseToolBucket",
                  "run-installer",
                  { "Ref": "AWS::NoValue" }
                ]
              },
              "finalize",
              {
                "Fn::If": [
                  "Reboot",
                  "reboot",
                  { "Ref": "AWS::NoValue" }
                ]
              }
            ],
            "update": [
              "setup",
              {
                "Fn::If": [
                  "InstallUpdates",
                  "install-updates",
                  { "Ref": "AWS::NoValue" }
                ]
              },
              "watchmaker-install",
              "watchmaker-update",
              {
                "Fn::If": [
                  "UseToolBucket",
                  "run-installer",
                  { "Ref": "AWS::NoValue" }
                ]
              },
              "finalize",
              {
                "Fn::If": [
                  "Reboot",
                  "reboot",
                  { "Ref": "AWS::NoValue" }
                ]
              }
            ]
          },
          "cw-agent-install": {
            "commands": {
              "01-get-cloudwatch-agent": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "install -Dbm 700 -o root -g root /dev/null /etc/cfn/scripts/AmazonCloudWatchAgent.zip &&",
                      " aws s3 cp ",
                      { "Ref": "CloudWatchAgentUrl" },
                      " /etc/cfn/scripts/AmazonCloudWatchAgent.zip"
                    ]
                  ]
                }
              },
              "02-extract-cloudwatch-agent": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "yum -y install unzip &&",
                      "unzip /etc/cfn/scripts/AmazonCloudWatchAgent.zip -d /etc/cfn/scripts/aws-cw-agent"
                    ]
                  ]
                }
              },
              "10-install-cloudwatch-agent": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      " bash -xe install.sh &&",
                      " /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl",
                      " -a fetch-config -m ec2 -c",
                      " file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s"
                    ]
                  ]
                },
                "cwd": "/etc/cfn/scripts/aws-cw-agent"
              }
            },
            "files": {
              "/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "{",
                      "  \"logs\": {\n",
                      "  \"logs_collected\": {\n",
                      "  \"files\": {\n",
                      "  \"collect_list\": [\n",
                      "  {\n",
                      "  \"file_path\": \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\",\n",
                      "  \"log_group_name\": \"",
                      {
                        "Fn::If": [
                          "InstallCloudWatchAgent",
                          { "Ref": "ArtifactoryLCLogGroup" },
                          { "Ref": "AWS::NoValue" }
                        ]
                      },
                      "\",\n",
                      "  \"log_stream_name\": \"cloudwatch_agent_logs_{instance_id}\",\n",
                      "  \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                      "  },\n",
                      "  {\n",
                      "  \"file_path\": \"/var/log/cfn-init.log\",\n",
                      "  \"log_group_name\": \"",
                      {
                        "Fn::If": [
                          "InstallCloudWatchAgent",
                          { "Ref": "ArtifactoryLCLogGroup" },
                          { "Ref": "AWS::NoValue" }
                        ]
                      },
                      "\",\n",
                      "  \"log_stream_name\": \"cfn_init_logs_{instance_id}\",\n",
                      "  \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                      "  },\n",
                      "  {\n",
                      "  \"file_path\": \"/var/log/messages\",\n",
                      "  \"log_group_name\": \"",
                      {
                        "Fn::If": [
                          "InstallCloudWatchAgent",
                          { "Ref": "ArtifactoryLCLogGroup" },
                          { "Ref": "AWS::NoValue" }
                        ]
                      },
                      "\",\n",
                      "  \"log_stream_name\": \"messages_logs_{instance_id}\",\n",
                      "  \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                      "  },\n",
                      "  {\n",
                      "  \"file_path\": \"/var/log/watchmaker/watchmaker.log\",\n",
                      "  \"log_group_name\": \"",
                      {
                        "Fn::If": [
                          "InstallCloudWatchAgent",
                          { "Ref": "ArtifactoryLCLogGroup" },
                          { "Ref": "AWS::NoValue" }
                        ]
                      },
                      "\",\n",
                      "  \"log_stream_name\": \"watchmaker_logs_{instance_id}\",\n",
                      "  \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                      "  },\n",
                      "  {\n",
                      "  \"file_path\": \"/var/log/watchmaker/salt_call.debug.log\",\n",
                      "  \"log_group_name\": \"",
                      {
                        "Fn::If": [
                          "InstallCloudWatchAgent",
                          { "Ref": "ArtifactoryLCLogGroup" },
                          { "Ref": "AWS::NoValue" }
                        ]
                      },
                      "\",\n",
                      "  \"log_stream_name\": \"salt_call_debug_logs_{instance_id}\",\n",
                      "  \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                      "  }\n",
                      "  ]\n",
                      "  }\n",
                      "  },\n",
                      "  \"log_stream_name\": \"default_logs_{instance_id}\"\n",
                      "  }\n",
                      "}\n"
                    ]
                  ]
                }
              }
            }
          },
          "finalize": {
            "commands": {
              "10-signal-success": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "cfn-signal -e 0",
                      " --stack ",
                      { "Ref": "AWS::StackName" },
                      " --resource ArtifactoryASG",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --role ",
                                { "Ref": "InstanceRoleName" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --url ",
                                { "Ref": "CfnEndpointUrl" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      " --region ",
                      { "Ref": "AWS::Region" },
                      "\n"
                    ]
                  ]
                },
                "ignoreErrors": "true"
              }
            }
          },
          "install-updates": {
            "commands": {
              "10-install-updates": {
                "command": "yum -y update"
              }
            }
          },
          "reboot": {
            "commands": {
              "10-reboot": {
                "command": "shutdown -r +1 &"
              }
            }
          },
          "run-installer": {
            "commands": {
              "01-get-installer_script": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "bash -xec \"install -b -m 000755 <(",
                      "aws s3 cp s3://",
                      { "Ref": "ArtifactoryToolBucket" },
                      "/SupportFiles/artifactory-EE_setup.sh -)  ",
                      "/etc/cfn/scripts/ArtifactoryEE-installer.sh\""
                    ]
                  ]
                }
              },
              "02-get-proxy_template": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "bash -xec \"install -b -m 000600 <(",
                      "aws s3 cp s3://",
                      { "Ref": "ArtifactoryToolBucket" },
                      "/SupportFiles/AFproxy-EE.conf.tmpl -) ",
                      "/etc/cfn/files/AFproxy.conf.tmpl\""
                    ]
                  ]
                }
              },
              "10-invoke-installer": {
                "command": "bash -xe /etc/cfn/scripts/ArtifactoryEE-installer.sh"
              }
            }
          },
          "setup": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      { "Ref": "AWS::StackId" },
                      "\n",
                      "region=",
                      { "Ref": "AWS::Region" },
                      "\n",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "role=",
                                { "Ref": "InstanceRoleName" },
                                "\n"
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "url=",
                                { "Ref": "CfnEndpointUrl" },
                                "\n"
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      "interval=1",
                      "\n",
                      "verbose=true",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.ArtifactoryLC.Metadata\n",
                      "action=cfn-init -v -c update",
                      " --stack ",
                      { "Ref": "AWS::StackName" },
                      " --resource ArtifactoryLC",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --role ",
                                { "Ref": "InstanceRoleName" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --url ",
                                { "Ref": "CfnEndpointUrl" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      " --region ",
                      { "Ref": "AWS::Region" },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/Artifactory.envs": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "ARTIFACTORY_REPO_URL=",
                       { "Ref": "ArtifactoryRepoUrl" },
                       "\n",
                      "ARTIFACTORY_RPM_NAME=",
                       { "Ref": "ArtifactoryRpmName" },
                       "\n",
                      "ARTIFACTORY_TOOL_BUCKET=",
                       { "Ref": "ArtifactoryToolBucket" },
                       "\n",
                      "ARTIFACTORY_APP_HOME=",
                       { "Ref": "ArtifactoryAppHome" },
                       "\n",
                      "ARTIFACTORY_CLUSTER_HOME=",
                       { "Ref": "ArtifactoryClusterHome" },
                       "\n",
                      "ARTIFACTORY_CLUSTER_KEY=",
                       { "Ref": "ArtifactoryClusterKey" },
                       "\n",
                      "ARTIFACTORY_CLUSTER_MASTER=",
                       { "Ref": "ArtifactoryClusterMaster" },
                       "\n",
                      "ARTIFACTORY_DB_HOSTFQDN=",
                       { "Ref": "ArtifactoryDbHost" },
                       "\n",
                      "ARTIFACTORY_DB_INSTANCE=",
                       { "Ref": "ArtifactoryDbInstance" },
                       "\n",
                      "ARTIFACTORY_DB_ADMIN=",
                       { "Ref": "ArtifactoryDbAdminUser" },
                       "\n",
                      "ARTIFACTORY_DB_PASSWD=",
                       { "Ref": "ArtifactoryDbAdminPasswd" },
                       "\n",
                      "ARTIFACTORY_PROXY_AKAS=",
                       { "Ref": "AkaList" },
                       "\n",
                      "ARTIFACTORY_S3_BAKUP_LOCS=",
                       { "Ref": "ArtifactoryS3BakupLocs" },
                       "\n",
                      "ARTIFACTORY_S3_SHARD_LOCS=",
                       { "Ref": "ArtifactoryS3ShardLocs" },
                       "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/scripts/watchmaker-install.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "PYPI_URL=",
                      { "Ref": "PypiIndexUrl" },
                      "\n",
                      "curl --silent --show-error --retry 5 -L ",
                      { "Ref": "CfnGetPipUrl" },
                      " | python - --index-url=\"$PYPI_URL\" 'wheel<0.30.0;python_version<\"2.7\"' 'wheel;python_version>=\"2.7\"'",
                      "\n",
                      "pip install",
                      " --index-url=\"$PYPI_URL\"",
                      " --upgrade 'pip<10' 'setuptools<37;python_version<\"2.7\"' 'setuptools;python_version>=\"2.7\"' boto3\n",
                      "pip install",
                      " --index-url=\"$PYPI_URL\"",
                      " --upgrade watchmaker\n\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/etc/yum.repos.d/artifactory.repo": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[artifactory-pro]\n",
                      "name = Artifactory RPM Repository\n",
                      "baseurl = ",
                      { "Ref": "ArtifactoryRepoUrl" },
                      "\n",
                      "enabled = 1\n",
                      "skip_if_unavailable = 1\n",
                      "gpgcheck = 0\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000644",
                "owner": "root"
              },
              "/etc/cfn/files/binarystore.xml": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "<!-- S3 chain template structure  -->\n",
                      "<config version=\"v1\">\n",
                      "   <!-- Define flow of binary-data from cache to S3 -->\n",
                      "   <chain>\n",
                      "      <provider id=\"cache-fs\" type=\"cache-fs\">\n",
                      "         <!--It first tries to read from the cache -->\n",
                      "         <provider id=\"eventual\" type=\"eventual\">\n",
                      "            <!--It is eventually persistent so writes are also written directly to persistent storage -->\n",
                      "            <provider id=\"retry\" type=\"retry\">\n",
                      "               <!-- If a read or write fails, retry -->\n",
                      "               <provider id=\"s3\" type=\"s3\" />\n",
                      "               <!-- Actual storage is S3 -->\n",
                      "            </provider>\n",
                      "         </provider>\n",
                      "      </provider>\n",
                      "   </chain>\n",
                      "   <!--\n",
                      "   Pull max cache size from template\n",
                      "   Pull caching-dir from template\n",
                      "   -->\n",
                      "   <provider id=\"cache-fs\" type=\"cache-fs\">\n",
                      "      <maxCacheSize>5000000000</maxCacheSize>\n",
                      "      <!-- 5GB cache-size -->\n",
                      "      <cacheProviderDir>",
                               { "Ref": "ArtifactoryAppHome" },
                               "-cluster/cache/",
                               "</cacheProviderDir>\n",
                      "      <!-- Caching location -->\n",
                      "   </provider>\n",
                      "   <provider id=\"eventual\" type=\"eventual\">\n",
                      "      <numberOfThreads>20</numberOfThreads>\n",
                      "      <!-- The maximum number of threads for parallel upload of files -->\n",
                      "   </provider>\n",
                      "   <provider id=\"retry\" type=\"retry\">\n",
                      "      <maxTrys>10</maxTrys>\n",
                      "      <!-- Try any read or write a maximum of 10 times -->\n",
                      "   </provider>\n",
                      "   <!--\n",
                      "   roleName, endpoint and bucketName should all be pulled from template\n",
                      "   -->\n",
                      "   <provider id=\"s3\" type=\"s3\">\n",
                      "      <roleName>",
                               { "Ref": "InstanceRoleName" },
                               "</roleName>\n",
                      "      <endpoint>s3.",
                               { "Ref": "AWS::Region" },
                               ".",
                               { "Ref": "AWS::URLSuffix" },
                               "</endpoint>\n",
                      "      <bucketName>",
                               { "Ref": "ArtifactoryS3ShardLocs" },
                               "</bucketName>\n",
                      "      <refreshCredentials>true</refreshCredentials>\n",
                      "   </provider>\n",
                      "</config>\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000644",
                "owner": "root"
              },
              "/etc/cfn/files/db.properties": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "type=postgresql\n",
                      "driver=org.postgresql.Driver\n",
                      "url=jdbc:postgresql://",
                        { "Ref": "ArtifactoryDbHost" },
                        ":5432/",
                        { "Ref": "ArtifactoryDbInstance" },
                        "\n",
                      "username=",
                        { "Ref": "ArtifactoryDbAdminUser" },
                        "\n",
                      "password=",
                        { "Ref": "ArtifactoryDbAdminPasswd" },
                        "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000644",
                "owner": "root"
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "watchmaker-install": {
            "commands": {
              "10-watchmaker-install": {
                "command": "bash -xe /etc/cfn/scripts/watchmaker-install.sh"
              }
            }
          },
          "watchmaker-launch": {
            "commands": {
              "10-watchmaker-launch": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "watchmaker --log-level debug",
                      " --log-dir /var/log/watchmaker",
                      " --no-reboot",
                      {
                        "Fn::If": [
                          "UseWamConfig",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --config \"",
                                { "Ref": "WatchmakerConfig" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseEnvironment",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --env \"",
                                { "Ref": "WatchmakerEnvironment" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseOuPath",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --ou-path \"",
                                { "Ref": "WatchmakerOuPath" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseAdminGroups",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --admin-groups \"",
                                { "Ref": "WatchmakerAdminGroups" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseAdminUsers",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --admin-users \"",
                                { "Ref": "WatchmakerAdminUsers" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      }
                    ]
                  ]
                }
              }
            }
          },
          "watchmaker-update": {
            "commands": {
              "10-watchmaker-update": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "watchmaker --log-level debug",
                      " --log-dir /var/log/watchmaker",
                      " --salt-states None",
                      " --no-reboot",
                      {
                        "Fn::If": [
                          "UseWamConfig",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --config \"",
                                { "Ref": "WatchmakerConfig" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseEnvironment",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --env \"",
                                { "Ref": "WatchmakerEnvironment" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseOuPath",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --ou-path \"",
                                { "Ref": "WatchmakerOuPath" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseAdminGroups",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --admin-groups \"",
                                { "Ref": "WatchmakerAdminGroups" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseAdminUsers",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --admin-users \"",
                                { "Ref": "WatchmakerAdminUsers" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      }
                    ]
                  ]
                }
              }
            }
          }
        },
        "ToggleCfnInitUpdate": { "Ref": "ToggleCfnInitUpdate" }
      },
      "Properties": {
        "AssociatePublicIpAddress": {
          "Fn::If": [
            "AssignPublicIp",
            true,
            false
          ]
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeType": "gp2"
            }
          },
          {
            "Fn::If": [
              "CreateAppVolume",
              {
                "DeviceName": "/dev/xvdf",
                "Ebs": {
                  "DeleteOnTermination": true,
                  "VolumeSize": { "Ref": "AppVolumeSize" },
                  "VolumeType": { "Ref": "AppVolumeType" }
                }
              },
              { "Ref": "AWS::NoValue" }
            ]
          }
        ],
        "IamInstanceProfile": {
          "Fn::If": [
            "AssignInstanceRole",
            { "Ref": "InstanceRoleProfile" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "ImageId": { "Ref": "AmiId" },
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": {
          "Fn::If": [
            "UseKeyPair",
            { "Ref": "KeyPairName" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "SecurityGroups": { "Ref": "SecurityGroupIds" },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "Content-Type: multipart/mixed; boundary=\"===============3585321300151562773==\"\n",
                "MIME-Version: 1.0\n",
                "\n",
                "--===============3585321300151562773==\n",
                "Content-Type: text/cloud-config; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n",
                "Content-Transfer-Encoding: 7bit\n",
                "Content-Disposition: attachment; filename=\"cloud.cfg\"\n",
                "\n",
                "#cloud-config\n",
                "\n",
                "system_info:\n",
                "  default_user:\n",
                "    name: ",
                { "Ref": "ProvisionUser" },
                "\n",
                "\n",
                "hostname: ",
                { "Ref": "WatchmakerComputerName" },
                "\n",
                "\n",
                "growpart:\n",
                "  mode: auto\n",
                "  devices: [ '/dev/xvda', '/dev/xvda2', '/dev/nvme0n1p2' ]\n",
                "  ignore_growroot_disabled: false\n",
                "\n",
                {
                  "Fn::If": [
                    "CreateAppVolume",
                    {
                      "Fn::Join": [
                        "",
                        [
                          "bootcmd:\n",
                          "- cloud-init-per instance mkfs-appvolume mkfs -t ext4 ",
                          {
                            "Fn::If": [
                              "SupportsNvme",
                              "/dev/nvme1n1",
                              "/dev/xvdf"
                            ]
                          },
                          "\n",
                          "mounts:\n",
                          "- [ ",
                          {
                            "Fn::If": [
                              "SupportsNvme",
                              "/dev/nvme1n1",
                              "/dev/xvdf"
                            ]
                          },
                          ", ",
                          { "Ref": "AppVolumeMountPath" },
                          " ]\n"
                        ]
                      ]
                    },
                    { "Ref": "AWS::NoValue" }
                  ]
                },
                "\n",
                "--===============3585321300151562773==\n",
                "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n",
                "Content-Transfer-Encoding: 7bit\n",
                "Content-Disposition: attachment; filename=\"script.sh\"\n",
                "\n",
                "#!/bin/bash -xe\n\n",
                "\n",
                "# Extend any available LVM PVs\n",
                "if [[ -x $( which pvs ) ]]\n",
                "then\n",
                "   LVMPVS=($(pvs --noheadings -o pv_name))\n",
                "   for PV in \"${LVMPVS[@]}\"\n",
                "   do\n",
                "    pvresize ${PV}\n",
                "   done\n",
                "\n",
                "   vgdisplay -s\n",
                "fi\n",
                "\n",
                "# CFN LaunchConfig Update Toggle: ",
                { "Ref": "ToggleNewInstances" },
                "\n\n",
                "# Export AWS ENVs\n",
                "test -r /etc/aws/models/endpoints.json && export AWS_DATA_PATH=/etc/aws/models || true\n",
                "export AWS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                "export REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                "export AWS_DEFAULT_REGION=",
                { "Ref": "AWS::Region" },
                "\n\n",
                "# Take base hostname and make it unique\n",
                "hostnamectl set-hostname $( hostname -s )-",
                "$( ip addr show eth0 | grep eth0$ | ",
                "sed -e 's/\\/.*//' -e 's/^.*\\.//' )",
                "$( hostname -f | sed -e \"s/$( hostname -s)//\"  )\n",
                "\n",
                "# Inject hostname into /etc/hosts file\n",
                "printf \"%s\\t%s %s\\n\" ",
                "\"$( ip addr show eth0 | sed -n '/eth0$/p' | sed -e 's/^ *inet *//' -e 's#/.*$##' )\" ",
                "\"$( hostname -f)\" \"$( hostname -s )\" >> /etc/hosts\n",
                "\n",
                "# Get pip\n",
                "PYPI_URL=",
                { "Ref": "PypiIndexUrl" },
                "\n",
                "curl --silent --show-error --retry 5 -L ",
                { "Ref": "CfnGetPipUrl" },
                " | python - --index-url=\"$PYPI_URL\" 'wheel<0.30.0;python_version<\"2.7\"' 'wheel;python_version>=\"2.7\"'",
                "\n\n",
                "# Add pip to path\n",
                "hash pip 2> /dev/null || ",
                "PATH=\"${PATH}:/usr/local/bin\"",
                "\n\n",
                "# Upgrade pip and setuptools\n",
                "pip install",
                " --index-url=\"$PYPI_URL\"",
                " --upgrade 'pip<10' 'setuptools<37;python_version<\"2.7\"' 'setuptools;python_version>=\"2.7\"'",
                "\n\n",
                "# Fix python urllib3 warnings\n",
                "yum -y install gcc python-devel libffi-devel openssl-devel\n",
                "pip install",
                " --index-url=\"$PYPI_URL\"",
                " --upgrade cffi\n",
                "pip install",
                " --index-url=\"$PYPI_URL\"",
                " --upgrade 'cryptography<2.2;python_version<\"2.7\"' 'cryptography;python_version>=\"2.7\"'",
                "\n\n",
                "if [[ $(rpm --quiet -q aws-cfn-bootstrap || pip show --quiet aws-cfn-bootstrap)$? -ne 0 ]]\n",
                "then\n",
                "  # Get cfn utils\n",
                "  pip install",
                " --index-url=\"$PYPI_URL\"",
                " --upgrade --upgrade-strategy only-if-needed ",
                { "Ref": "CfnBootstrapUtilsUrl" },
                "\n\n",
                "  # Fixup cfn utils\n",
                "  INITDIR=$(find -L /opt/aws/apitools/cfn-init/init -name redhat",
                " 2> /dev/null || echo /usr/init/redhat)\n",
                "  chmod 775 ${INITDIR}/cfn-hup\n",
                "  ln -f -s ${INITDIR}/cfn-hup /etc/rc.d/init.d/cfn-hup\n",
                "  chkconfig --add cfn-hup\n",
                "  chkconfig cfn-hup on\n",
                "  mkdir -p /opt/aws/bin\n",
                "  BINDIR=$(find -L /opt/aws/apitools/cfn-init -name bin",
                " 2> /dev/null || echo /usr/bin)\n",
                "  for SCRIPT in cfn-elect-cmd-leader cfn-get-metadata cfn-hup",
                " cfn-init cfn-send-cmd-event cfn-send-cmd-result cfn-signal\n",
                "  do\n",
                "  ln -s ${BINDIR}/${SCRIPT} /opt/aws/bin/${SCRIPT} 2> /dev/null || ",
                "  echo Skipped symbolic link, /opt/aws/bin/${SCRIPT} already exists\n",
                "  done\n\n",
                "fi\n\n",
                "# Remove gcc now that it is no longer needed\n",
                "yum -y remove gcc --setopt=clean_requirements_on_remove=1\n\n",
                "# Add cfn utils to path\n",
                "hash cfn-signal 2> /dev/null || ",
                "PATH=\"${PATH}:/usr/local/bin:/opt/aws/bin\"",
                "\n\n",
                "# Execute cfn-init\n",
                "cfn-init -v -c launch",
                " --stack ",
                { "Ref": "AWS::StackName" },
                " --resource ArtifactoryLC",
                {
                  "Fn::If": [
                    "AssignInstanceRole",
                    {
                      "Fn::Join": [
                        "",
                        [
                          " --role ",
                          { "Ref": "InstanceRoleName" }
                        ]
                      ]
                    },
                    ""
                  ]
                },
                {
                  "Fn::If": [
                    "UseCfnUrl",
                    {
                      "Fn::Join": [
                        "",
                        [
                          " --url ",
                          { "Ref": "CfnEndpointUrl" }
                        ]
                      ]
                    },
                    ""
                  ]
                },
                " --region ",
                { "Ref": "AWS::Region" },
                " ||",
                " ( echo 'ERROR: cfn-init failed! Aborting!';",
                " cfn-signal -e 1",
                "  --stack ",
                { "Ref": "AWS::StackName" },
                "  --resource ArtifactoryASG",
                {
                  "Fn::If": [
                    "AssignInstanceRole",
                    {
                      "Fn::Join": [
                        "",
                        [
                          " --role ",
                          { "Ref": "InstanceRoleName" }
                        ]
                      ]
                    },
                    ""
                  ]
                },
                {
                  "Fn::If": [
                    "UseCfnUrl",
                    {
                      "Fn::Join": [
                        "",
                        [
                          " --url ",
                          { "Ref": "CfnEndpointUrl" }
                        ]
                      ]
                    },
                    ""
                  ]
                },
                "  --region ",
                { "Ref": "AWS::Region" },
                ";",
                " exit 1",
                " )\n\n",
                "--===============3585321300151562773==--"
              ]
            ]
          }
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "ArtifactoryLCLogGroup": {
      "Condition": "InstallCloudWatchAgent",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/ec2/lx/",
              { "Ref": "AWS::StackName" }
            ]
          ]
        }
      },
      "Type": "AWS::Logs::LogGroup"
    },
    "ScaleDownScheduledAction": {
      "Condition": "UseScheduledAction",
      "Properties": {
        "AutoScalingGroupName": { "Ref": "ArtifactoryASG" },
        "DesiredCapacity": { "Ref": "MinCapacity" },
        "Recurrence": { "Ref": "ScaleDownSchedule" }
      },
      "Type": "AWS::AutoScaling::ScheduledAction"
    },
    "ScaleUpScheduledAction": {
      "Condition": "UseScheduledAction",
      "Properties": {
        "AutoScalingGroupName": { "Ref": "ArtifactoryASG" },
        "DesiredCapacity": { "Ref": "MaxCapacity" },
        "Recurrence": { "Ref": "ScaleUpSchedule" }
      },
      "Type": "AWS::AutoScaling::ScheduledAction"
    }
  }
}
